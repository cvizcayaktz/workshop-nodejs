window.onload = function() {
  elSearchForm.addEventListener("submit", searchTerm);

  // Render breadcrums and productlist as soon as the page is loaded
  renderBreadCrums();
  renderProductList();
};

// Variables declaration
var elSearchForm = document.querySelector("[data-js=form]");
var elSearchInput = document.querySelector(
  "[data-js=form] .header__search-input"
);
var rootSearchUrl = "https://api.mercadolibre.com/sites/MLA/search?q=";

//Use this method to make request to the API
function request(url, callback, error) {
  var xhr = new XMLHttpRequest();
  xhr.open("GET", url, true);
  xhr.onload = function(e) {
    if (xhr.readyState === 4) {
      if (xhr.status === 200) {
        callback(xhr.responseText);
      } else {
        error(xhr.statusText);
      }
    }
  };
  xhr.onerror = function(e) {
    error(xhr.statusText);
  };
  xhr.send(null);
}

function searchTerm(e) {
  var searchUrl = rootSearchUrl + elSearchInput.value;
  e.preventDefault();

  request(searchUrl, success, error);

  function success(data) {
    renderData(data);
    elSearchInput.value = "";
  }

  function error(err) {
    console.log("Error: ", err);
  }
}

function renderData(data) {
  data = JSON.parse(data);

  renderBreadCrums(data);
  renderProductList(data);
}

function renderBreadCrums(data) {
  var breadcrumbsListWrapper = document.getElementById("breadcrumb-wrapper");
  var breadcrumbTemplate = document.getElementById("breadcrumb-template");
  var template = Handlebars.compile(breadcrumbTemplate.innerHTML);
  var context = {};

  if (!data) {
    breadcrumbsListWrapper.innerHTML = template();
  } else if (data.results.length === 0) {
    breadcrumbsListWrapper.innerHTML = template();
  } else {
    context = { breadCrumbs: data.filters[0].values[0].path_from_root };
    breadcrumbsListWrapper.innerHTML = template(context);
  }
}

function renderProductList(data) {
  var productListWrapper = document.getElementById("products-list-wrapper");
  var prodTemplate = document.getElementById("product-list-template");
  var template = Handlebars.compile(prodTemplate.innerHTML);
  var context = {};

  if (!data) {
    // No search made
    context = { products: [] };
    productListWrapper.innerHTML = template(context);
  } else if (data.results.length === 0) {
    // No results for the searched term
    var noProdTemplate = document.getElementById("no-product-found-template");
    template = Handlebars.compile(noProdTemplate.innerHTML);
    productListWrapper.innerHTML = template();
  } else {
    // There are results for the search
    context = { products: data.results };
    productListWrapper.innerHTML = template(context);
  }
}

Handlebars.registerHelper('formatedMoney', function(amount) {
  return showAmount(formatMoney(amount, 2, '$', '.', ',', true));
});

function formatMoney(number, places, symbol, thousand, decimal, asObject) {
  number = number || 0;
  places = !isNaN(places = Math.abs(places)) ? places : 2;
  symbol = (typeof symbol === 'string') ? symbol : "$";
  thousand = thousand || ",";
  decimal = decimal || ".";
  var negative = number < 0 ? "-" : "",
      i = parseInt(number = Math.abs(+number || 0).toFixed(places), 10) + "",
      j = (j = i.length) > 3 ? j % 3 : 0;
  if (asObject) {
      var obj = {};
      obj.symbol = symbol;
      obj.amount = negative + (j ? i.substr(0, j) + thousand : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousand);
      obj.decAmount =  Math.abs(number - i).toFixed(places).slice(2);
      obj.decimalSep = decimal;

      return obj;
  }
  return symbol + negative + (j ? i.substr(0, j) + thousand : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousand) + (places ? decimal + Math.abs(number - i).toFixed(places).slice(2) : "");
}

/**
 * This function returns a string that replicates the markup
 * generated by the showAmount taglib in grails. This function can
 * be used with formatMoney() passing the sixth argument as true
 * so an object is returned and used like this:
 * showAmount(formatMoney(532, 2, '€', ',', '.', true))
 * Will return:
 * <span class="price-symbol">€</span>
 * <span class="price-integer">532</span>
 * <span class="price-decimal-mark">.</span>
 * <span class="price-decimal">00</span>
 * 
 * @param {Object} formatedMoney object that contains four
 * values, the currency symbol, the integer amount, the
 * decimal amount and the decimal separator.
 */
function showAmount(formatedMoney) {
  var markupString = '<span class="price-symbol">'+formatedMoney.symbol+'</span><span class="price-integer">' + formatedMoney.amount + '</span><span class="price-decimal-mark">' + formatedMoney.decimalSep + '</span><span class="price-decimal">' + formatedMoney.decAmount + '</span>';

  return markupString;
}
