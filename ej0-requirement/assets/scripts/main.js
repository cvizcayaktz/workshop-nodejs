var searchInput = document.querySelector('[data-js=search]');
var searchBtn = document.querySelector('.header__search-btn');

window.onload = function() {
    var searchForm = document.querySelector('[data-js=form]');

    searchForm.addEventListener('submit', function(e) {
        e.preventDefault();
        searchBtn.disabled = true;
        meliSearch(searchInput.value);
    });
}

function meliSearch(searchString) {
    var searchParams = {
        q: searchString,
        limit: 4
    };
    var reqUrl = 'https://api.mercadolibre.com/sites/MLA/search?' + toQueryString(searchParams);
    
    request(reqUrl, renderSearch, errorHandler);
}

function renderSearch(response) {
    var itemsObj = JSON.parse(response).results;
    var categoryFilters = JSON.parse(response).filters.filter(function(obj) {
        return obj.id == 'category';
    });
    var breadcrumbsArr = categoryFilters[0].values[0].path_from_root;
    
    renderItems(itemsObj);
    renderBreadcrumbs(breadcrumbsArr);

    
    searchBtn.disabled = false;
    console.log(breadcrumbsArr);
}

function renderItems(items) {
    var sourceMarkup   = document.getElementById('item-template').innerHTML;
    var itemTemplate = Handlebars.compile(sourceMarkup);
    var contentWrapper = document.querySelector('.main__content');

    contentWrapper.innerHTML = "";

    items.forEach(function(item) {
        var context = {
            itemUrl: item.permalink,
            pictureUrl: item.thumbnail,
            itemTitle: item.title,
            itemPrice: '$ ' + item.price,
            free_shipping: item.shipping.free_shipping,
            itemLocation: item.address.state_name
        };
        var htmlEl = document.createElement('div');
        htmlEl.innerHTML = itemTemplate(context);
        contentWrapper.append(htmlEl.firstElementChild);
    });   
}

function renderBreadcrumbs(catArr) {
    var contentWrapper = document.querySelector('.breadcrumb-container');
    if (catArr.length()> 0) {
        var sourceMarkup   = document.getElementById('breadcrumbs-template').innerHTML;
        var breadCrumbsTemplate = Handlebars.compile(sourceMarkup);
    
        contentWrapper.innerHTML = "";
    
        var context = {
            cats: catArr
        };
        
        var htmlEl = document.createElement('div');
        htmlEl.innerHTML = breadCrumbsTemplate(context);
        contentWrapper.append(htmlEl.firstElementChild);
    } else {
        contentWrapper.innerHTML = "No hay categorías";
    }
}

function errorHandler(data) {
    console.log(data);
}

function toQueryString(obj) {
    var parts = [];
    for (var i in obj) {
        if (obj.hasOwnProperty(i)) {
            parts.push(encodeURIComponent(i) + "=" + encodeURIComponent(obj[i]));
        }
    }
    return parts.join("&");
}


Handlebars.registerHelper('formatedMoney', function(amount) {
    return showAmount(formatMoney(amount, 2, '$', '.', ',', true));
});

function formatMoney(number, places, symbol, thousand, decimal, asObject) {
    number = number || 0;
    places = !isNaN(places = Math.abs(places)) ? places : 2;
    symbol = (typeof symbol === 'string') ? symbol : "$";
    thousand = thousand || ",";
    decimal = decimal || ".";
    var negative = number < 0 ? "-" : "",
        i = parseInt(number = Math.abs(+number || 0).toFixed(places), 10) + "",
        j = (j = i.length) > 3 ? j % 3 : 0;
    if (asObject) {
        var obj = {};
        obj.symbol = symbol;
        obj.amount = negative + (j ? i.substr(0, j) + thousand : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousand);
        obj.decAmount =  Math.abs(number - i).toFixed(places).slice(2);
        obj.decimalSep = decimal;

        return obj;
    }
    return symbol + negative + (j ? i.substr(0, j) + thousand : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousand) + (places ? decimal + Math.abs(number - i).toFixed(places).slice(2) : "");
}

/**
 * This function returns a string that replicates the markup
 * generated by the showAmount taglib in grails. This function can
 * be used with formatMoney() passing the sixth argument as true
 * so an object is returned and used like this:
 * showAmount(formatMoney(532, 2, '€', ',', '.', true))
 * Will return:
 * <span class="price-symbol">€</span>
 * <span class="price-integer">532</span>
 * <span class="price-decimal-mark">.</span>
 * <span class="price-decimal">00</span>
 * 
 * @param {Object} formatedMoney object that contains four
 * values, the currency symbol, the integer amount, the
 * decimal amount and the decimal separator.
 */

function showAmount(formatedMoney) {
    var markupString = '<span class="price-symbol">'+formatedMoney.symbol+'</span><span class="price-integer">' + formatedMoney.amount + '</span><span class="price-decimal-mark">' + formatedMoney.decimalSep + '</span><span class="price-decimal">' + formatedMoney.decAmount + '</span>';

    return markupString;
}

//Use this method to make request to the API
function request(url, callback, error) {
    var xhr = new XMLHttpRequest();
    xhr.open("GET", url, true);
    xhr.onload = function(e) {
        if (xhr.readyState === 4) {
            if (xhr.status === 200) {
                callback(xhr.responseText);
            } else {
                error(xhr.statusText)
            }
        }
    };
    xhr.onerror = function(e) {
        error(xhr.statusText);
    };
    xhr.send(null);
}
